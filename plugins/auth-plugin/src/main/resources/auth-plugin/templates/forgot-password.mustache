<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>忘记密码 - Work Anyway</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .forgot-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      width: 100%;
      max-width: 400px;
      animation: slideIn 0.5s ease-out;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .forgot-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px 30px;
      text-align: center;
    }

    .forgot-header h1 {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .forgot-header p {
      opacity: 0.9;
      font-size: 16px;
      line-height: 1.5;
    }

    .forgot-form {
      padding: 40px 30px;
    }

    .form-group {
      margin-bottom: 24px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #374151;
      font-weight: 500;
      font-size: 14px;
    }

    .form-control {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 16px;
      transition: all 0.3s ease;
      background-color: #f9fafb;
    }

    .form-control:focus {
      outline: none;
      border-color: #667eea;
      background-color: white;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-control.error {
      border-color: #ef4444;
      background-color: #fef2f2;
    }

    .btn {
      width: 100%;
      padding: 12px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid #ffffff40;
      border-top: 2px solid #ffffff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 8px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .error-message, .success-message, .info-message {
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      font-size: 14px;
      display: none;
    }

    .error-message {
      background-color: #fef2f2;
      color: #dc2626;
      border-left: 4px solid #dc2626;
    }

    .success-message {
      background-color: #f0fdf4;
      color: #16a34a;
      border-left: 4px solid #16a34a;
    }

    .info-message {
      background-color: #eff6ff;
      color: #2563eb;
      border-left: 4px solid #2563eb;
    }

    .forgot-footer {
      text-align: center;
      padding: 20px 30px;
      background-color: #f9fafb;
      border-top: 1px solid #e5e7eb;
    }

    .forgot-footer p {
      color: #6b7280;
      font-size: 14px;
      margin-bottom: 12px;
    }

    .back-link {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }

    .back-link:hover {
      text-decoration: underline;
    }

    .field-error {
      color: #dc2626;
      font-size: 12px;
      margin-top: 4px;
      display: none;
    }

    .resend-section {
      text-align: center;
      margin-top: 20px;
      display: none;
    }

    .resend-text {
      color: #6b7280;
      font-size: 14px;
      margin-bottom: 10px;
    }

    .resend-link {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
      cursor: pointer;
    }

    .resend-link:hover {
      text-decoration: underline;
    }

    .resend-link.disabled {
      color: #9ca3af;
      cursor: not-allowed;
    }

    @media (max-width: 480px) {
      .forgot-container {
        margin: 10px;
      }
      
      .forgot-header {
        padding: 30px 20px;
      }
      
      .forgot-form {
        padding: 30px 20px;
      }
      
      .forgot-footer {
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="forgot-container">
    <div class="forgot-header">
      <h1>🔑 重置密码</h1>
      <p>输入您的邮箱地址，我们将发送重置密码的链接</p>
    </div>
    
    <div class="forgot-form">
      <div class="error-message" id="errorMessage"></div>
      <div class="success-message" id="successMessage"></div>
      <div class="info-message" id="infoMessage"></div>
      
      <form id="forgotForm">
        <div class="form-group">
          <label for="email">邮箱地址</label>
          <input type="email" id="email" name="email" class="form-control" placeholder="请输入您注册时使用的邮箱" required>
          <div class="field-error" id="emailError"></div>
        </div>
        
        <button type="submit" class="btn" id="forgotBtn">
          <span id="forgotText">发送重置链接</span>
          <div class="spinner" id="forgotSpinner" style="display: none;"></div>
        </button>
      </form>
      
      <div class="resend-section" id="resendSection">
        <p class="resend-text">没有收到邮件？</p>
        <a class="resend-link" id="resendLink">重新发送</a>
        <span id="resendCountdown" style="color: #9ca3af; font-size: 12px;"></span>
      </div>
    </div>
    
    <div class="forgot-footer">
      <p>记起密码了？</p>
      <a href="/page/auth/login" class="back-link">返回登录</a>
    </div>
  </div>

  <script>
    class ForgotPasswordManager {
      constructor() {
        this.form = document.getElementById('forgotForm');
        this.emailInput = document.getElementById('email');
        this.forgotBtn = document.getElementById('forgotBtn');
        this.forgotText = document.getElementById('forgotText');
        this.forgotSpinner = document.getElementById('forgotSpinner');
        this.resendSection = document.getElementById('resendSection');
        this.resendLink = document.getElementById('resendLink');
        this.resendCountdown = document.getElementById('resendCountdown');
        
        this.resendTimer = null;
        this.resendSeconds = 0;
        
        this.initEventListeners();
        this.loadEmailFromUrl();
      }

      initEventListeners() {
        this.form.addEventListener('submit', (e) => this.handleForgotPassword(e));
        this.emailInput.addEventListener('blur', () => this.validateEmail());
        this.emailInput.addEventListener('input', () => this.clearFieldError('email'));
        this.resendLink.addEventListener('click', (e) => this.handleResend(e));
      }

      async handleForgotPassword(e) {
        e.preventDefault();
        
        if (!this.validateForm()) {
          return;
        }

        this.setLoading(true);
        this.clearMessages();

        const email = this.emailInput.value.trim().toLowerCase();

        try {
          // 这里应该调用忘记密码的API，暂时模拟
          const response = await this.simulateForgotPasswordAPI(email);

          if (response.success) {
            this.handleSuccess(email);
          } else {
            this.handleError(response.error || '发送失败，请重试');
          }

        } catch (error) {
          console.error('Forgot password error:', error);
          this.showError('网络错误，请检查您的连接后重试');
        } finally {
          this.setLoading(false);
        }
      }

      async simulateForgotPasswordAPI(email) {
        // 模拟API调用
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // 模拟不同的响应
        if (email.includes('notfound@')) {
          return { success: false, error: '该邮箱未注册' };
        }
        
        if (email.includes('error@')) {
          throw new Error('Network error');
        }
        
        return { success: true };
      }

      handleSuccess(email) {
        this.showSuccess('重置链接已发送到您的邮箱，请查收');
        this.showInfo(`如果您没有收到邮件，请检查垃圾邮件文件夹，或稍后重新发送`);
        
        // 显示重新发送选项
        this.resendSection.style.display = 'block';
        this.startResendCountdown(60); // 60秒倒计时
        
        // 禁用表单
        this.emailInput.disabled = true;
        this.forgotBtn.disabled = true;
        this.forgotText.textContent = '已发送';
      }

      handleError(errorMessage) {
        this.showError(errorMessage);
        this.emailInput.focus();
      }

      async handleResend(e) {
        e.preventDefault();
        
        if (this.resendLink.classList.contains('disabled')) {
          return;
        }
        
        const email = this.emailInput.value.trim().toLowerCase();
        
        try {
          this.resendLink.textContent = '发送中...';
          this.resendLink.classList.add('disabled');
          
          const response = await this.simulateForgotPasswordAPI(email);
          
          if (response.success) {
            this.showSuccess('重置链接已重新发送');
            this.startResendCountdown(60);
          } else {
            this.showError('重新发送失败：' + response.error);
            this.resendLink.textContent = '重新发送';
            this.resendLink.classList.remove('disabled');
          }
          
        } catch (error) {
          this.showError('重新发送失败，请稍后重试');
          this.resendLink.textContent = '重新发送';
          this.resendLink.classList.remove('disabled');
        }
      }

      startResendCountdown(seconds) {
        this.resendSeconds = seconds;
        this.resendLink.classList.add('disabled');
        
        this.updateCountdownDisplay();
        
        this.resendTimer = setInterval(() => {
          this.resendSeconds--;
          
          if (this.resendSeconds <= 0) {
            clearInterval(this.resendTimer);
            this.resendLink.textContent = '重新发送';
            this.resendLink.classList.remove('disabled');
            this.resendCountdown.textContent = '';
          } else {
            this.updateCountdownDisplay();
          }
        }, 1000);
      }

      updateCountdownDisplay() {
        this.resendLink.textContent = '重新发送';
        this.resendCountdown.textContent = `(${this.resendSeconds}秒后可重新发送)`;
      }

      validateForm() {
        return this.validateEmail();
      }

      validateEmail() {
        const email = this.emailInput.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!email) {
          this.showFieldError('email', '请输入邮箱地址');
          return false;
        }
        
        if (!emailRegex.test(email)) {
          this.showFieldError('email', '请输入有效的邮箱地址');
          return false;
        }
        
        this.clearFieldError('email');
        return true;
      }

      setLoading(loading) {
        this.forgotBtn.disabled = loading;
        this.forgotText.style.display = loading ? 'none' : 'inline';
        this.forgotSpinner.style.display = loading ? 'inline-block' : 'none';
      }

      showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
      }

      showSuccess(message) {
        const successDiv = document.getElementById('successMessage');
        successDiv.textContent = message;
        successDiv.style.display = 'block';
      }

      showInfo(message) {
        const infoDiv = document.getElementById('infoMessage');
        infoDiv.textContent = message;
        infoDiv.style.display = 'block';
      }

      clearMessages() {
        document.getElementById('errorMessage').style.display = 'none';
        document.getElementById('successMessage').style.display = 'none';
        document.getElementById('infoMessage').style.display = 'none';
      }

      showFieldError(field, message) {
        const errorDiv = document.getElementById(field + 'Error');
        const input = document.getElementById(field);
        
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        input.classList.add('error');
      }

      clearFieldError(field) {
        const errorDiv = document.getElementById(field + 'Error');
        const input = document.getElementById(field);
        
        errorDiv.style.display = 'none';
        input.classList.remove('error');
      }

      loadEmailFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        const email = urlParams.get('email');
        
        if (email) {
          this.emailInput.value = email;
          this.emailInput.focus();
        } else {
          this.emailInput.focus();
        }
      }
    }

    // 初始化忘记密码管理器
    document.addEventListener('DOMContentLoaded', () => {
      new ForgotPasswordManager();
    });
  </script>
</body>
</html> 