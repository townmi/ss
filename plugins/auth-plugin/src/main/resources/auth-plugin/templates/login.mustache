<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Áî®Êà∑ÁôªÂΩï - Work Anyway</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .login-container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      width: 100%;
      max-width: 400px;
      animation: slideIn 0.5s ease-out;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .login-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 40px 30px;
      text-align: center;
    }

    .login-header h1 {
      font-size: 28px;
      font-weight: 700;
      margin-bottom: 8px;
    }

    .login-header p {
      opacity: 0.9;
      font-size: 16px;
    }

    .login-form {
      padding: 40px 30px;
    }

    .form-group {
      margin-bottom: 24px;
    }

    .form-group label {
      display: block;
      margin-bottom: 8px;
      color: #374151;
      font-weight: 500;
      font-size: 14px;
    }

    .form-control {
      width: 100%;
      padding: 12px 16px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 16px;
      transition: all 0.3s ease;
      background-color: #f9fafb;
    }

    .form-control:focus {
      outline: none;
      border-color: #667eea;
      background-color: white;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .form-control.error {
      border-color: #ef4444;
      background-color: #fef2f2;
    }

    .password-group {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 12px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      color: #6b7280;
      cursor: pointer;
      font-size: 14px;
      padding: 4px;
    }

    .password-toggle:hover {
      color: #374151;
    }

    .form-options {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 24px;
      font-size: 14px;
    }

    .checkbox-group {
      display: flex;
      align-items: center;
    }

    .checkbox-group input {
      margin-right: 8px;
    }

    .forgot-link {
      color: #667eea;
      text-decoration: none;
    }

    .forgot-link:hover {
      text-decoration: underline;
    }

    .btn {
      width: 100%;
      padding: 12px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
    }

    .btn:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .spinner {
      width: 20px;
      height: 20px;
      border: 2px solid #ffffff40;
      border-top: 2px solid #ffffff;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-right: 8px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .error-message {
      background-color: #fef2f2;
      color: #dc2626;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      border-left: 4px solid #dc2626;
      font-size: 14px;
      display: none;
    }

    .success-message {
      background-color: #f0fdf4;
      color: #16a34a;
      padding: 12px 16px;
      border-radius: 8px;
      margin-bottom: 20px;
      border-left: 4px solid #16a34a;
      font-size: 14px;
      display: none;
    }

    .login-footer {
      text-align: center;
      padding: 20px 30px;
      background-color: #f9fafb;
      border-top: 1px solid #e5e7eb;
    }

    .login-footer p {
      color: #6b7280;
      font-size: 14px;
      margin-bottom: 12px;
    }

    .register-link {
      color: #667eea;
      text-decoration: none;
      font-weight: 500;
    }

    .register-link:hover {
      text-decoration: underline;
    }

    .field-error {
      color: #dc2626;
      font-size: 12px;
      margin-top: 4px;
      display: none;
    }

    .attempts-warning {
      background-color: #fef3c7;
      color: #d97706;
      padding: 8px 12px;
      border-radius: 6px;
      font-size: 12px;
      margin-bottom: 16px;
      display: none;
    }

    @media (max-width: 480px) {
      .login-container {
        margin: 10px;
      }
      
      .login-header {
        padding: 30px 20px;
      }
      
      .login-form {
        padding: 30px 20px;
      }
      
      .login-footer {
        padding: 20px;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <div class="login-header">
      <h1>üîê Ê¨¢ËøéÂõûÊù•</h1>
      <p>ÁôªÂΩïÂà∞ Work Anyway Á≥ªÁªü</p>
    </div>
    
    <div class="login-form">
      <div class="error-message" id="errorMessage"></div>
      <div class="success-message" id="successMessage"></div>
      <div class="attempts-warning" id="attemptsWarning"></div>
      
      <form id="loginForm">
        <div class="form-group">
          <label for="email">ÈÇÆÁÆ±Âú∞ÂùÄ</label>
          <input type="email" id="email" name="email" class="form-control" placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÈÇÆÁÆ±" required>
          <div class="field-error" id="emailError"></div>
        </div>
        
        <div class="form-group">
          <label for="password">ÂØÜÁ†Å</label>
          <div class="password-group">
            <input type="password" id="password" name="password" class="form-control" placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÂØÜÁ†Å" required>
            <button type="button" class="password-toggle" id="passwordToggle">üëÅÔ∏è</button>
          </div>
          <div class="field-error" id="passwordError"></div>
        </div>
        
        <div class="form-options">
          <div class="checkbox-group">
            <input type="checkbox" id="rememberMe" name="rememberMe">
            <label for="rememberMe">ËÆ∞‰ΩèÊàë</label>
          </div>
          <a href="/page/auth/forgot-password" class="forgot-link">ÂøòËÆ∞ÂØÜÁ†ÅÔºü</a>
        </div>
        
        <button type="submit" class="btn" id="loginBtn">
          <span id="loginText">ÁôªÂΩï</span>
          <div class="spinner" id="loginSpinner" style="display: none;"></div>
        </button>
      </form>
    </div>
    
    <div class="login-footer">
      <p>ËøòÊ≤°ÊúâË¥¶Êà∑Ôºü</p>
      <a href="/page/auth/register" class="register-link">Á´ãÂç≥Ê≥®ÂÜå</a>
    </div>
  </div>

  <script>
    class LoginManager {
      constructor() {
        this.form = document.getElementById('loginForm');
        this.emailInput = document.getElementById('email');
        this.passwordInput = document.getElementById('password');
        this.loginBtn = document.getElementById('loginBtn');
        this.loginText = document.getElementById('loginText');
        this.loginSpinner = document.getElementById('loginSpinner');
        this.passwordToggle = document.getElementById('passwordToggle');
        
        this.initEventListeners();
        this.loadRememberedEmail();
      }

      initEventListeners() {
        this.form.addEventListener('submit', (e) => this.handleLogin(e));
        this.passwordToggle.addEventListener('click', () => this.togglePassword());
        
        // ÂÆûÊó∂È™åËØÅ
        this.emailInput.addEventListener('blur', () => this.validateEmail());
        this.passwordInput.addEventListener('input', () => this.clearFieldError('password'));
        
        // ÂõûËΩ¶ÈîÆÊîØÊåÅ
        this.emailInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') this.passwordInput.focus();
        });
      }

      async handleLogin(e) {
        e.preventDefault();
        
        if (!this.validateForm()) {
          return;
        }

        this.setLoading(true);
        this.clearMessages();

        const formData = new FormData(this.form);
        const loginData = {
          email: formData.get('email').trim().toLowerCase(),
          password: formData.get('password'),
          rememberMe: formData.get('rememberMe') === 'on'
        };

        try {
          const response = await fetch('/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(loginData)
          });

          const result = await response.json();

          if (result.success) {
            this.handleLoginSuccess(result.data, loginData.rememberMe);
          } else {
            this.handleLoginError(result.error || 'ÁôªÂΩïÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
          }

        } catch (error) {
          console.error('Login error:', error);
          this.showError('ÁΩëÁªúÈîôËØØÔºåËØ∑Ê£ÄÊü•ÊÇ®ÁöÑËøûÊé•ÂêéÈáçËØï');
        } finally {
          this.setLoading(false);
        }
      }

      handleLoginSuccess(data, rememberMe) {
        // Â≠òÂÇ® token
        const storage = rememberMe ? localStorage : sessionStorage;
        storage.setItem('accessToken', data.accessToken);
        storage.setItem('refreshToken', data.refreshToken);
        storage.setItem('userInfo', JSON.stringify(data.user));

        // ËÆ∞‰ΩèÈÇÆÁÆ±
        if (rememberMe) {
          localStorage.setItem('rememberedEmail', this.emailInput.value);
        }

        this.showSuccess('ÁôªÂΩïÊàêÂäüÔºÅÊ≠£Âú®Ë∑≥ËΩ¨...');

        // Ë∑≥ËΩ¨Âà∞ÁõÆÊ†áÈ°µÈù¢
        setTimeout(() => {
          const redirectUrl = new URLSearchParams(window.location.search).get('redirect') || '/page/';
          window.location.href = redirectUrl;
        }, 1000);
      }

      handleLoginError(errorMessage) {
        this.showError(errorMessage);
        
        // Â§ÑÁêÜÁâπÂÆöÈîôËØØ
        if (errorMessage.includes('attempts')) {
          this.showAttemptsWarning('ÁôªÂΩïÂ∞ùËØïÊ¨°Êï∞ËøáÂ§öÔºåËØ∑Á®çÂêéÂÜçËØï');
        }
        
        // Ê∏ÖÁ©∫ÂØÜÁ†Å
        this.passwordInput.value = '';
        this.passwordInput.focus();
      }

      validateForm() {
        let isValid = true;
        
        // È™åËØÅÈÇÆÁÆ±
        if (!this.validateEmail()) {
          isValid = false;
        }
        
        // È™åËØÅÂØÜÁ†Å
        if (!this.passwordInput.value.trim()) {
          this.showFieldError('password', 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å');
          isValid = false;
        }
        
        return isValid;
      }

      validateEmail() {
        const email = this.emailInput.value.trim();
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!email) {
          this.showFieldError('email', 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ');
          return false;
        }
        
        if (!emailRegex.test(email)) {
          this.showFieldError('email', 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ');
          return false;
        }
        
        this.clearFieldError('email');
        return true;
      }

      togglePassword() {
        const type = this.passwordInput.type === 'password' ? 'text' : 'password';
        this.passwordInput.type = type;
        this.passwordToggle.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
      }

      setLoading(loading) {
        this.loginBtn.disabled = loading;
        this.loginText.style.display = loading ? 'none' : 'inline';
        this.loginSpinner.style.display = loading ? 'inline-block' : 'none';
      }

      showError(message) {
        const errorDiv = document.getElementById('errorMessage');
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
      }

      showSuccess(message) {
        const successDiv = document.getElementById('successMessage');
        successDiv.textContent = message;
        successDiv.style.display = 'block';
      }

      showAttemptsWarning(message) {
        const warningDiv = document.getElementById('attemptsWarning');
        warningDiv.textContent = message;
        warningDiv.style.display = 'block';
      }

      clearMessages() {
        document.getElementById('errorMessage').style.display = 'none';
        document.getElementById('successMessage').style.display = 'none';
        document.getElementById('attemptsWarning').style.display = 'none';
      }

      showFieldError(field, message) {
        const errorDiv = document.getElementById(field + 'Error');
        const input = document.getElementById(field);
        
        errorDiv.textContent = message;
        errorDiv.style.display = 'block';
        input.classList.add('error');
      }

      clearFieldError(field) {
        const errorDiv = document.getElementById(field + 'Error');
        const input = document.getElementById(field);
        
        errorDiv.style.display = 'none';
        input.classList.remove('error');
      }

      loadRememberedEmail() {
        const rememberedEmail = localStorage.getItem('rememberedEmail');
        if (rememberedEmail) {
          this.emailInput.value = rememberedEmail;
          document.getElementById('rememberMe').checked = true;
          this.passwordInput.focus();
        } else {
          this.emailInput.focus();
        }
      }
    }

    // ÂàùÂßãÂåñÁôªÂΩïÁÆ°ÁêÜÂô®
    document.addEventListener('DOMContentLoaded', () => {
      new LoginManager();
    });
  </script>
</body>
</html> 