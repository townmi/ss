<div class="page-header">
    <h1>📋 登录日志</h1>
    <p>查看系统登录历史记录和安全事件</p>
</div>

<div class="filter-section">
    <h3>筛选条件</h3>
    <div class="filter-row">
        <div class="filter-group">
            <label>时间范围</label>
            <select id="timeRange" onchange="applyFilters()">
                <option value="24">过去 24 小时</option>
                <option value="48">过去 48 小时</option>
                <option value="168">过去 7 天</option>
                <option value="720">过去 30 天</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label>状态</label>
            <select id="statusFilter" onchange="applyFilters()">
                <option value="">全部</option>
                <option value="success">成功</option>
                <option value="failed">失败</option>
                <option value="blocked">被阻止</option>
            </select>
        </div>
        
        <div class="filter-group">
            <label>用户标识</label>
            <input type="text" id="userFilter" placeholder="用户名或邮箱" onkeyup="debounceFilter()">
        </div>
        
        <div class="filter-group">
            <label>IP 地址</label>
            <input type="text" id="ipFilter" placeholder="IP 地址" onkeyup="debounceFilter()">
        </div>
        
        <div class="filter-group" style="align-self: flex-end;">
            <button class="btn btn-primary" onclick="applyFilters()">
                <span class="btn-icon">🔍</span> 搜索
            </button>
            <button class="btn btn-secondary" onclick="resetFilters()">
                <span class="btn-icon">🔄</span> 重置
            </button>
        </div>
    </div>
</div>

<div class="section">
    <div id="logsContainer">
        <div class="loading">
            <div class="loading-spinner"></div>
            <p>正在加载登录日志...</p>
        </div>
    </div>
</div>

<style>
/* 页面特定样式 */
.loading {
    text-align: center;
    padding: 40px;
    color: #6c757d;
}

.loading-spinner {
    display: inline-block;
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 10px;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.log-entry {
    display: flex;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.2s;
}

.log-entry:hover {
    background-color: #f8f9fa;
}

.log-time {
    width: 180px;
    color: #6c757d;
    font-size: 0.9rem;
}

.log-user {
    flex: 1;
    font-weight: 500;
}

.log-ip {
    width: 150px;
    font-family: monospace;
    color: #495057;
}

.log-details {
    flex: 1;
    color: #6c757d;
    font-size: 0.9rem;
}

.pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
}

.pagination button {
    padding: 8px 16px;
    border: 1px solid #dee2e6;
    background: white;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.2s;
}

.pagination button:hover:not(:disabled) {
    background: #f8f9fa;
    border-color: #667eea;
}

.pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.pagination-info {
    color: #6c757d;
}
</style>

<script>
let currentPage = 1;
let filterTimer = null;

// 页面加载时获取日志
document.addEventListener('DOMContentLoaded', function() {
    loadLogs();
});

function loadLogs(page = 1) {
    currentPage = page;
    const container = document.getElementById('logsContainer');
    container.innerHTML = '<div class="loading"><div class="loading-spinner"></div><p>正在加载登录日志...</p></div>';
    
    const params = new URLSearchParams({
        page: page,
        limit: 20,
        hours: document.getElementById('timeRange').value,
        status: document.getElementById('statusFilter').value,
        identifier: document.getElementById('userFilter').value,
        clientIp: document.getElementById('ipFilter').value
    });
    
    fetch(`/auth/logs?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                renderLogs(data.data);
            } else {
                container.innerHTML = '<div class="empty-state"><div class="empty-icon">❌</div><p>加载失败：' + (data.error || '未知错误') + '</p></div>';
            }
        })
        .catch(error => {
            container.innerHTML = '<div class="empty-state"><div class="empty-icon">❌</div><p>网络错误：' + error.message + '</p></div>';
        });
}

function renderLogs(data) {
    const container = document.getElementById('logsContainer');
    
    if (!data.logs || data.logs.length === 0) {
        container.innerHTML = '<div class="empty-state"><div class="empty-icon">📭</div><p>暂无登录日志</p></div>';
        return;
    }
    
    let html = '<table class="log-table"><thead><tr>';
    html += '<th>时间</th><th>用户</th><th>IP地址</th><th>状态</th><th>详情</th>';
    html += '</tr></thead><tbody>';
    
    data.logs.forEach(log => {
        html += '<tr class="log-entry">';
        html += `<td class="log-time">${formatTime(log.createdAt)}</td>`;
        html += `<td class="log-user">${log.identifier}</td>`;
        html += `<td class="log-ip">${log.clientIp}</td>`;
        html += `<td><span class="log-status ${log.loginStatus}">${getStatusText(log.loginStatus)}</span></td>`;
        html += `<td class="log-details">${log.failureReason || '-'}</td>`;
        html += '</tr>';
    });
    
    html += '</tbody></table>';
    
    // 分页
    if (data.total > data.limit) {
        const totalPages = Math.ceil(data.total / data.limit);
        html += '<div class="pagination">';
        html += `<button onclick="loadLogs(1)" ${currentPage === 1 ? 'disabled' : ''}>首页</button>`;
        html += `<button onclick="loadLogs(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>上一页</button>`;
        html += `<span class="pagination-info">第 ${currentPage} / ${totalPages} 页</span>`;
        html += `<button onclick="loadLogs(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>下一页</button>`;
        html += `<button onclick="loadLogs(${totalPages})" ${currentPage === totalPages ? 'disabled' : ''}>末页</button>`;
        html += '</div>';
    }
    
    container.innerHTML = html;
}

function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleString('zh-CN');
}

function getStatusText(status) {
    const statusMap = {
        'success': '成功',
        'failed': '失败',
        'blocked': '被阻止'
    };
    return statusMap[status] || status;
}

function applyFilters() {
    loadLogs(1);
}

function resetFilters() {
    document.getElementById('timeRange').value = '24';
    document.getElementById('statusFilter').value = '';
    document.getElementById('userFilter').value = '';
    document.getElementById('ipFilter').value = '';
    loadLogs(1);
}

function debounceFilter() {
    clearTimeout(filterTimer);
    filterTimer = setTimeout(() => {
        applyFilters();
    }, 500);
}
</script> 