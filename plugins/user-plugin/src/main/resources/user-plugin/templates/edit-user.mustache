<div class="container">
  <div class="card">
    <div class="card-header">
      <h1>编辑用户</h1>
    </div>
    <div class="card-body">
      <!-- 消息提示 -->
      <div id="message" class="alert" style="display: none;"></div>

      <!-- 表单 -->
      <form id="editUserForm">
        <div class="form-group">
          <label for="name" class="required">姓名</label>
          <input type="text" id="name" name="name" class="form-control" value="{{user.name}}" required>
          <div class="invalid-feedback" id="nameError"></div>
        </div>

        <div class="form-group">
          <label for="email" class="required">邮箱</label>
          <input type="email" id="email" name="email" class="form-control" value="{{user.email}}" required>
          <div class="invalid-feedback" id="emailError"></div>
        </div>

        <div class="form-group">
          <label for="phone">电话</label>
          <input type="tel" id="phone" name="phone" class="form-control" value="{{user.phone}}">
          <div class="invalid-feedback" id="phoneError"></div>
        </div>

        <div class="form-group">
          <label for="department">部门</label>
          <input type="text" id="department" name="department" class="form-control" value="{{user.department}}">
          <div class="invalid-feedback" id="departmentError"></div>
        </div>

        <div class="form-group">
          <label for="role">角色</label>
          <select id="role" name="role" class="form-control">
            <option value="user" {{#user.role}}{{#equals role "user" }}selected{{/equals}}{{/user.role}}>普通用户</option>
            <option value="admin" {{#user.role}}{{#equals role "admin" }}selected{{/equals}}{{/user.role}}>管理员</option>
          </select>
          <div class="invalid-feedback" id="roleError"></div>
        </div>

        <div class="form-group">
          <label for="status">状态</label>
          <select id="status" name="status" class="form-control">
            <option value="active" {{#user.status}}{{#equals status "active" }}selected{{/equals}}{{/user.status}}>激活
            </option>
            <option value="inactive" {{#user.status}}{{#equals status "inactive" }}selected{{/equals}}{{/user.status}}>
              停用</option>
          </select>
          <div class="invalid-feedback" id="statusError"></div>
        </div>

        <div class="form-group">
          <label for="notes">备注</label>
          <textarea id="notes" name="notes" class="form-control" rows="4">{{user.notes}}</textarea>
          <div class="invalid-feedback" id="notesError"></div>
        </div>

        <div class="form-actions">
          <a href="/users/{{user.id}}" class="btn btn-secondary">取消</a>
          <button type="submit" class="btn btn-primary" id="submitBtn">
            <span id="submitText">保存更改</span>
            <div class="spinner" id="spinner" style="display: none; margin-left: 8px;"></div>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('editUserForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const spinner = document.getElementById('spinner');
    const messageDiv = document.getElementById('message');

    form.addEventListener('submit', function (e) {
      e.preventDefault();

      // 清除之前的错误状态
      clearErrors();

      // 获取表单数据
      const formData = new FormData(form);
      const userData = {};
      for (let [key, value] of formData.entries()) {
        userData[key] = value.trim();
      }

      // 基本验证
      if (!validateForm(userData)) {
        return;
      }

      // 显示加载状态
      setLoading(true);

      // 提交数据
      fetch('/users/{{user.id}}', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(userData)
      })
        .then(response => response.json())
        .then(data => {
          setLoading(false);

          if (data.success) {
            showMessage('用户更新成功！', 'success');
            // 延迟跳转到详情页
            setTimeout(() => {
              window.location.href = '/page/users/{{user.id}}';
            }, 1500);
          } else {
            showMessage(data.error || '更新失败，请重试', 'error');
          }
        })
        .catch(error => {
          setLoading(false);
          console.error('Error:', error);
          showMessage('网络错误，请重试', 'error');
        });
    });

    function validateForm(data) {
      let isValid = true;

      if (!data.name) {
        showFieldError('name', '姓名不能为空');
        isValid = false;
      }

      if (!data.email) {
        showFieldError('email', '邮箱不能为空');
        isValid = false;
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(data.email)) {
        showFieldError('email', '请输入有效的邮箱地址');
        isValid = false;
      }

      return isValid;
    }

    function showFieldError(fieldName, message) {
      const field = document.getElementById(fieldName);
      const errorDiv = document.getElementById(fieldName + 'Error');

      field.classList.add('is-invalid');
      errorDiv.textContent = message;
    }

    function clearErrors() {
      const invalidFields = document.querySelectorAll('.is-invalid');
      const errorDivs = document.querySelectorAll('.invalid-feedback');

      invalidFields.forEach(field => field.classList.remove('is-invalid'));
      errorDivs.forEach(div => div.textContent = '');
    }

    function setLoading(loading) {
      submitBtn.disabled = loading;
      spinner.style.display = loading ? 'inline-block' : 'none';
      submitText.textContent = loading ? '保存中...' : '保存更改';
    }

    function showMessage(message, type) {
      messageDiv.textContent = message;
      messageDiv.className = 'alert alert-' + type;
      messageDiv.style.display = 'block';

      // 滚动到顶部显示消息
      messageDiv.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  });
</script>